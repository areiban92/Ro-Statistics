# Document and reload your package
golem::document_and_reload()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
test_check("RoStatistics")
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', file = "~/.Renviron", append = TRUE)
## Vignette ----
usethis::use_vignette("RoStatistics")
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
---
title: "RoStatistics"
output: rmarkdown::html_vignette
vignette: >
%\VignetteIndexEntry{RoStatistics}
%\VignetteEngine{knitr::rmarkdown}
%\VignetteEncoding{UTF-8}
---
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(RoStatistics)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(RoStatistics)
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
app
## Code Coverage----
## Set the code coverage service ("codecov" or "coveralls")
usethis::use_coverage()
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
report()
library(covr)
report()
()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
print_dev <- golem::make_dev(print)
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
print_dev("hola")
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
options(golem.app.prod = TRUE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
print_dev <- golem::make_dev(print)
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Run the application
run_app()
# Set options here
print_dev <- golem::make_dev(print)
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
options(golem.app.prod = TRUE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
print_dev <- golem::make_dev(print)
# Set options here
print_dev <- golem::make_dev(print)
options(golem.app.prod = TRUE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
print_dev <- golem::make_dev(print)
options(golem.app.prod = TRUE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
options(golem.app.prod = TRUE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
devtools::check()
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
devtools::check()
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
devtools::check()
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
library(stringi)
stringi::stri_escape_unicode("➛")
stringi::stri_escape_unicode("o")
stringi::stri_escape_unicode("ó")
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
stringi::stri_escape_unicode("Ó")
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
stringi::stri_escape_unicode("Ó")
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
stringi::stri_escape_unicode("á")
á
library(stringi)
stringi::stri_escape_unicode("á")
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
stringi::stri_escape_unicode("ó")
stringi::stri_escape_unicode("R²")
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
stringi::stri_escape_unicode("≠")
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
stringi::stri_escape_unicode("≠")
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Document and reload your package
golem::document_and_reload()
devtools::check()
View(print_dev)
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Set options here
print_dev <- golem::make_dev(print)
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Set options here
print_dev <- golem::make_dev(print)
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
print_dev <- golem::make_dev(print)
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
stringi::stri_escape_unicode("Á")
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
devtools::check()
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
devtools::check()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
devtools::check()
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
## Fill the DESCRIPTION ----
## Add meta data about your application
##
## /!\ Note: if you want to change the name of your app during development,
## either re-run this function, call golem::set_golem_name(), or don't forget
## to change the name in the app_sys() function in app_config.R /!\
##
golem::fill_desc(
pkg_name = "RoStatistics", # The Name of the package containing the App
pkg_title = "Ro-Statistics", # The Title of the package containing the App
pkg_description = "Este paquete ofrece un entorno grafico para la obtención de resultados estadisticos.
Desarrolllado con el paquete Shiny, ofrce una abstraccion de los metodos estadisticos mas usados en las ciencias sociales.
Contiene metodos descriptivos, T-test, Contingencia, Anova de un factor,correlacion.", # The Description of the package containing the App
author_first_name = "Carlos", # Your First Name
author_last_name = "Guerrero", # Your Last Name
author_email = "carlos.guerrero@ucacue.edu.ec", # Your Email
repo_url = NULL # The URL of the GitHub Repo (optional)
)
## Fill the DESCRIPTION ----
## Add meta data about your application
##
## /!\ Note: if you want to change the name of your app during development,
## either re-run this function, call golem::set_golem_name(), or don't forget
## to change the name in the app_sys() function in app_config.R /!\
##
golem::fill_desc(
pkg_name = "RoStatistics", # The Name of the package containing the App
pkg_title = "Ro-Statistics", # The Title of the package containing the App
pkg_description = "Este paquete ofrece un entorno grafico para la obtención de resultados estadisticos.
Desarrolllado con el paquete Shiny, ofrce una abstraccion de los metodos estadisticos mas usados en las ciencias sociales.
Contiene metodos descriptivos, T-test, Contingencia, Anova de un factor,correlacion.", # The Description of the package containing the App
author_first_name = "Carlos", # Your First Name
author_last_name = "Guerrero", # Your Last Name
author_email = "carlos.guerrero@ucacue.edu.ec", # Your Email
repo_url = NULL # The URL of the GitHub Repo (optional)
)
# Set options here
print_dev <- golem::make_dev(print)
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Document and reload your package
golem::document_and_reload()
remove.packages("RoStatistics", lib="~/R/win-library/4.1")
library (remotes)
remotes::install_github("CarlosGuerreroG/RoStatisticsGolem")
remotes::install_github("CarlosGuerreroG/RoStatisticsGolem")
